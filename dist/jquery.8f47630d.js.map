{"version":3,"sources":["../src/jquery/index.ts"],"names":[],"mappings":";AAwBA,IAAM,EAAsC,IAAI,IAEhD,EAAA,WAIE,SAAA,EAAY,GACN,GAAC,EAAD,CAGA,GAAA,aAAoB,EACf,OAAA,EAGL,IAAA,EADC,KAAA,SAAW,EAEZ,aAAoB,cACtB,EAAW,EAAS,UAElB,IAAA,EAA6B,GAC7B,GAAa,IAAb,GAA+B,IAAb,EAEpB,EAAc,CAAC,QACV,GAAI,aAAoB,SAC7B,EAAc,MAAM,UAAU,MAAM,MAAM,QACrC,GAAwB,iBAAb,EAAuB,CAGnC,GAA0B,IAA1B,EAAS,QAAQ,KAAY,CAE3B,IAAA,EAAsB,SAAS,cAAc,OACjD,EAAI,UAAY,EAChB,EAAc,MAAM,UAAU,MAAM,MAAM,EAAI,YAC9C,EAAM,UAGN,EAAc,MAAM,UAAU,MAAM,MAClC,SAAS,iBAAiB,IAI1B,GADC,KAAA,OAAS,EAAY,QACrB,KAAK,OACD,OAAA,KAEJ,IAAA,IAAI,EAAI,EAAG,EAAI,KAAK,OAAQ,IAC1B,KAAA,GAAK,EAAY,KAyG9B,OArGE,EAAA,UAAA,KAAA,SAAK,GACE,IAAA,IAAI,EAAI,EAAG,EAAI,KAAK,OAAQ,IAAK,CAC9B,IAAA,EAAgB,KAAK,GAC3B,EAAG,MAAM,EAAM,CAAC,EAAM,MAM1B,EAAA,UAAA,KAAA,SAAK,EAAa,GACZ,OAAC,GAGE,KAAA,KAAK,SAAA,GACR,EAAK,aAAa,EAAK,KAElB,MALA,KAAK,GAAG,aAAa,IAWhC,EAAA,UAAA,SAAA,SAAS,GAIA,OAHF,KAAA,KAAK,SAAA,GACR,EAAK,UAAU,IAAI,KAEd,MAET,EAAA,UAAA,YAAA,SAAY,GAIH,OAHF,KAAA,KAAK,SAAA,GACR,EAAK,UAAU,OAAO,KAEjB,MAKT,EAAA,UAAA,IAAA,SAAI,EAAsB,GAcjB,MAbY,iBAAR,EAEJ,KAAA,KAAK,SAAA,GACR,EAAK,MAAM,GAAO,IAIf,KAAA,KAAK,SAAA,GACH,IAAA,IAAI,KAAQ,EACf,EAAG,MAAM,GAAQ,EAAI,KAIpB,MAKT,EAAA,UAAA,KAAA,WACO,KAAA,IAAI,UAAW,UAEtB,EAAA,UAAA,KAAA,WACO,KAAA,IAAI,UAAW,SAKtB,EAAA,UAAA,KAAA,SAAK,GACC,OAAC,GAGA,KAAA,GAAG,UAAY,EACb,MAHE,KAAK,GAAG,WAKnB,EAAA,UAAA,KAAA,SAAK,GACC,OAAC,GAGA,KAAA,GAAG,UAAY,EACb,MAHE,KAAK,GAAG,WAQnB,EAAA,UAAA,GAAA,SAAG,EAAgB,GACZ,KAAA,KAAK,SAAA,GACR,EAAO,IAAI,EAAM,CACf,KAAM,EACN,GAAI,IAEN,EAAK,iBAAiB,EAAQ,GAAI,MAGtC,EAAA,UAAA,OAAA,SAAO,GACA,KAAA,KAAK,SAAA,GACJ,GAAA,EAAO,IAAI,GAAO,CACd,IAAA,EAAM,EAAO,IAAI,GACnB,EAAI,OAAS,GACf,EAAK,oBAAoB,EAAI,KAAM,EAAI,IAAI,OAKrD,EAnJA,GAqJA,SAAS,EAAE,GACF,OAAA,IAAI,EAAW,GAGxB,OAAO,EAAI","file":"jquery.8f47630d.js","sourceRoot":"..\\pages","sourcesContent":["//定义类型\r\ntype $dom = string | DomElement | HTMLElement | NodeList;\r\n//出现了个错误，类不能继承接口，可以改成类\r\ninterface Jquery {\r\n  length: number;\r\n  selector: $dom;\r\n  [index: number]: HTMLElement;\r\n}\r\ninterface eachFun {\r\n  (item: HTMLElement, index: number): void;\r\n}\r\n//监听事件\r\ninterface handleEvent {\r\n  (evt: Event): void;\r\n}\r\n//事件代理类型\r\ninterface event {\r\n  /**\r\n   * type 事件名\r\n   * fn 方法\r\n   */\r\n  type: string;\r\n  fn: handleEvent;\r\n}\r\nconst Events: WeakMap<HTMLElement, event> = new Map();\r\n//备注：this[index]未做提示，增加接口描述即可\r\nclass DomElement implements Jquery {\r\n  public selector: $dom;\r\n  public length: number;\r\n  [index: number]: HTMLElement;\r\n  constructor(selector: $dom) {\r\n    if (!selector) {\r\n      return;\r\n    }\r\n    if (selector instanceof DomElement) {\r\n      return selector;\r\n    }\r\n    this.selector = selector;\r\n    let nodeType;\r\n    if (selector instanceof HTMLElement) {\r\n      nodeType = selector.nodeType;\r\n    }\r\n    let selectorArr: HTMLElement[] = [];\r\n    if (nodeType === 9 || nodeType === 1) {\r\n      //documnet类型\r\n      selectorArr = [selector as HTMLElement];\r\n    } else if (selector instanceof NodeList) {\r\n      selectorArr = Array.prototype.slice.apply(selector);\r\n    } else if (typeof selector === \"string\") {\r\n      //字符串情况下\r\n      //如果是创建情况下\r\n      if (selector.indexOf(\"<\") === 0) {\r\n        //创建元素\r\n        let div: HTMLDivElement = document.createElement(\"div\");\r\n        div.innerHTML = selector;\r\n        selectorArr = Array.prototype.slice.apply(div.childNodes);\r\n        div = null;\r\n      } else {\r\n        //查找元素\r\n        selectorArr = Array.prototype.slice.apply(\r\n          document.querySelectorAll(selector)\r\n        );\r\n      }\r\n      this.length = selectorArr.length;\r\n      if (!this.length) {\r\n        return this;\r\n      }\r\n      for (let i = 0; i < this.length; i++) {\r\n        this[i] = selectorArr[i];\r\n      }\r\n    }\r\n  }\r\n  each(fn: eachFun) {\r\n    for (let i = 0; i < this.length; i++) {\r\n      const elem: Element = this[i];\r\n      fn.apply(elem, [elem, i]);\r\n    }\r\n  }\r\n  /**\r\n   * 设置或者传参\r\n   */\r\n  attr(key: string, val?: string): string | DomElement {\r\n    if (!val) {\r\n      return this[0].getAttribute(key);\r\n    } else {\r\n      this.each(item => {\r\n        item.setAttribute(key, val);\r\n      });\r\n      return this;\r\n    }\r\n  }\r\n  /**\r\n   * 设置样式\r\n   */\r\n  addClass(className: string): DomElement {\r\n    this.each(item => {\r\n      item.classList.add(className);\r\n    });\r\n    return this;\r\n  }\r\n  removeClass(className: string): DomElement {\r\n    this.each(item => {\r\n      item.classList.remove(className);\r\n    });\r\n    return this;\r\n  }\r\n  /**\r\n   * 设置style\r\n   */\r\n  css(key: string | object, value?: string) {\r\n    if (typeof key === \"string\") {\r\n      //如果是键值对\r\n      this.each(item => {\r\n        item.style[key] = value;\r\n      });\r\n    } else {\r\n      //如果是对象,//简单处理\r\n      this.each(it => {\r\n        for (let item in key) {\r\n          it.style[item] = key[item];\r\n        }\r\n      });\r\n    }\r\n    return this;\r\n  }\r\n  /**\r\n   * 隐藏or消失\r\n   */\r\n  show() {\r\n    this.css(\"display\", \"block\");\r\n  }\r\n  hide() {\r\n    this.css(\"display\", \"none\");\r\n  }\r\n  /**\r\n   * 实现html，text 方法\r\n   */\r\n  html(text?: string) {\r\n    if (!text) {\r\n      return this[0].innerHTML;\r\n    }\r\n    this[0].innerHTML = text;\r\n    return this;\r\n  }\r\n  text(text?: string) {\r\n    if (!text) {\r\n      return this[0].innerText;\r\n    }\r\n    this[0].innerText = text;\r\n    return this;\r\n  }\r\n  /**\r\n   * 绑定事件,事件代理另说\r\n   */\r\n  on(handle: string, fn: handleEvent) {\r\n    this.each(item => {\r\n      Events.set(item, {\r\n        type: handle,\r\n        fn: fn\r\n      });\r\n      item.addEventListener(handle, fn, false);\r\n    });\r\n  }\r\n  unbind(handle: string) {\r\n    this.each(item => {\r\n      if (Events.has(item)) {\r\n        const obj = Events.get(item);\r\n        if (obj.type === handle) {\r\n          item.removeEventListener(obj.type, obj.fn, false);\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction $(dom: $dom) {\r\n  return new DomElement(dom);\r\n}\r\n\r\nwindow.$ = $;\r\n"]}